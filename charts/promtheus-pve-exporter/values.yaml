# Proxmox authentication config
authentication:
  # Token authentication
  default:
    user:
    token_name:
    token_value:
    verify_ssl: false
  # User authentication
  # default:
  #   user:
  #   password:
  #   verify_ssl: false

# Proxmox VE servers' hostnames
scrapeTargets: []
  # - 172.16.2.254

# Namespace of ScrapeConfig, defaults to release namespace
scrapeConfigNamespace:

# ScrapeConfig customization
scrapeConfig:
  # Additional labels to add to the ScrapeConfig metadata (Kubernetes object labels)
  labels: {}
    # environment: production
    # team: infrastructure
  
  # Static labels to add to all scraped metrics
  staticLabels: {}
    # cluster_name: "my-pve-cluster"
    # environment: "production"
    # datacenter: "us-west-1"
  
  # Additional relabeling rules to apply during scraping
  relabelings: []
    # Example: Add a custom label based on target address
    # - sourceLabels: [__address__]
    #   regex: '(\d+\.\d+\.\d+\.\d+).*'
    #   targetLabel: datacenter
    #   replacement: 'dc-${1}'
    # 
    # Example: Drop metrics with certain names
    # - sourceLabels: [__name__]
    #   regex: 'unwanted_metric_.*'
    #   action: drop

replicaCount: 1

image:
  repository: prompve/prometheus-pve-exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Environment variables for the container
# Can be specified as simple key-value pairs or with valueFrom for secrets/configmaps
env: {}
  # Simple environment variables:
  # MY_ENV_VAR: "my-value"
  # DEBUG: "true"
  #
  # Environment variables from secrets or configmaps:
  # SECRET_PASSWORD:
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: password
  # CONFIG_VALUE:
  #   valueFrom:
  #     configMapKeyRef:
  #       name: my-configmap
  #       key: config-key

service:
  type: ClusterIP
  port: 9221

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
